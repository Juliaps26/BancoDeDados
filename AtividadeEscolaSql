create schema escola_SQL;

use escola_SQL;

create table alunos (
aluno_id integer primary key,
nome text (255),
data_nascimento varchar (255),
endereco varchar (255),
telefone varchar (255)
);

create table professores (
professor_id integer primary key,
nome text (255),
data_contratacao varchar (255)
);

create table disciplinas (
disciplina_id integer primary key,
nome_disciplina text (255),
codigo_disciplina varchar (255),
carga_horaria numeric
);
create table turmas (
turma_id integer primary key,
ano_escolar numeric,
disciplina_id integer,
professor_id integer,
foreign key (disciplina_id) references disciplinas (disciplina_id),
foreign key (professor_id) references professores(professor_id)
);

create table notas (
nota_id integer primary key,
aluno_id integer,
foreign key (aluno_id) references alunos (aluno_id),
disciplina_id integer,
foreign key (disciplina_id) references disciplinas (disciplina_id),
data_avaliacao varchar (255),
nota numeric
);

create table presenca(
presenca_id integer primary key,
aluno_id integer,
foreign key (aluno_id) references alunos (aluno_id),
turma_id integer,
foreign key (turma_id) references turmas (turma_id),
data_aula varchar(255),
presenca varchar(255)
);

-- Inserindo dados na tabela alunos
INSERT INTO Alunos (aluno_id, nome, data_nascimento, endereco, telefone)
VALUES
 (1, 'João Silva', '1995-03-15', 'Rua A, 123', '(11) 1234-5678'),
 (2, 'Maria Santos', '1998-06-22', 'Av. B, 456', '(11) 9876-5432'),
 (3, 'Carlos Oliveira', '1997-01-10', 'Rua C, 789', '(11) 5678-1234'),
 (4, 'Ana Pereira', '1999-09-05', 'Av. D, 987', '(11) 4321-8765'),
 (5, 'Pedro Rodrigues', '1996-07-18', 'Rua E, 654', '(11) 3456-7890'),
 (6, 'Sara Costa', '2000-04-30', 'Av. F, 321', '(11) 8765-4321');

-- Inserindo dados na tabela Professores

INSERT INTO Professores (professor_id, nome, data_contratacao)
VALUES
 (1, 'Ana Lima', '2010-08-15'),
 (2, 'José Santos', '2005-04-20'),
 (3, 'Márcio Oliveira', '2012-11-10'),
 (4, 'Cláudia Pereira', '2014-03-25'),
 (5, 'Fernanda Rodrigues', '2018-09-08'),
 (6, 'Ricardo Costa', '2019-12-01');
 
 -- Inserindo dados na tabela disciplinas
 
 INSERT INTO Disciplinas (disciplina_id, nome_disciplina, codigo_disciplina, carga_horaria)
VALUES
 (1, 'Programação em C', 'PC101', 60),
 (2, 'Banco de Dados', 'BD201', 45),
 (3, 'Desenvolvimento Web', 'DW301', 75),
 (4, 'Algoritmos Avançados', 'AA401', 60),
 (5, 'Inteligência Artificial', 'IA501', 90),
 (6, 'Segurança da Informação', 'SI601', 45);

-- Inserindo dados na tabela turmas

INSERT INTO Turmas (turma_id, ano_escolar, disciplina_id, professor_id)
VALUES
 (101, 2023, 1, 1),
 (102, 2023, 2, 2),
 (103, 2023, 3, 3),
 (104, 2023, 4, 4),
 (105, 2023, 5, 5),
 (106, 2023, 6, 6);
 
 -- Inserindo dados na tabela Notas
 INSERT INTO Notas (nota_id, aluno_id, disciplina_id, data_avaliacao, nota)
VALUES
 (1, 1, 1, '2023-03-10', 85),
 (2, 2, 1, '2023-03-10', 78),
 (3, 3, 1, '2023-03-10', 92),
 (4, 4, 2, '2023-03-15', 88),
 (5, 5, 2, '2023-03-15', 95),
 (6, 6, 2, '2023-03-15', 75);
 
-- Inserindo dados na tabela Presenca

INSERT INTO Presenca (presenca_id, aluno_id, turma_id, data_aula, presenca)
VALUES
 (1, 1, 101, '2023-03-10', 'presente'),
 (2, 2, 101, '2023-03-10', 'presente'),
 (3, 3, 101, '2023-03-10', 'presente'),
 (4, 4, 102, '2023-03-15', 'ausente'),
 (5, 5, 102, '2023-03-15', 'presente'),
 (6, 6, 102, '2023-03-15', 'presente');

-- 1 - Qual é o nome do professor que ministra a disciplina com código "BD201"?
-- select para selecionar o nome da tabela professores from tabela professores, inner join para fazer relacionamento, dois pois são duas tabelas, where a condição para especificar o ID

select professores.nome from professores 
inner join turmas on professores.professor_id=turmas.professor_id
inner join disciplinas on turmas.disciplina_id=disciplinas.disciplina_id
where codigo_disciplina="BD201";


-- 2 - Para a disciplina com código "PC101", obtenha a lista de alunos que obtiveram notas maiores que 80.
-- select para selecionar os nomes dos alunos na tabela alunos , inner join para relacionar on para ser mais preciso no relacionamento, where condição para especificar o codigo da disciplina e (AND) para outra condição que é maior que 80

select alunos.nome from alunos 
inner join notas on alunos.aluno_id=notas.aluno_id
inner join disciplinas on notas.disciplina_id=disciplinas.disciplina_id
where codigo_disciplina="PC101" AND notas.nota > 80;

-- 3 - Quais alunos estiveram presentes na aula da turma com ID 101 na data '2023-03-10'?
-- Select o nome do aluno na tabela aluno, relacionando com a tabela presenca especificando com o on, que eu quero na tabela alunos o id do aluno, e na tabela presenca o id do aluno, relacionando também com outra tabela turmas epecificando que na tabela presenca eu quero o id da turma, e por fim a condição where para especificar dia e id da turma

select alunos.nome from alunos 
inner join presenca on alunos.aluno_id=presenca.aluno_id
inner join turmas on presenca.turma_id=turmas.turma_id
where turmas.turma_id=101 AND presenca.data_aula="2023-03-10";

-- 4 - Calcule a média das notas dos alunos na disciplina com código "IA501".
-- avg - retorna a média 

select avg(notas.nota) from notas 
inner join disciplinas on notas.disciplina_id=disciplinas.disciplina_id
where disciplinas.codigo_disciplina="IA501";

-- 5 - Liste todos os alunos e as disciplinas que eles estão matriculados. Inclua os alunos que não estão matriculados em nenhuma disciplina.
-- LEFT JOIN (retorna todos os registros da tabela, pegando os dados da tabela a base jogando a esquerda mesmo que não tenha relação ) ex: mostra todos os clientes, mesmo os que não fizeram pedido constando como nulo.

select alunos.nome, disciplinas.nome_disciplina from alunos
left join notas on alunos.aluno_id=notas.aluno_id
left join disciplinas on notas.disciplina_id=disciplinas.disciplina_id;


-- 6 - Liste todos os alunos que não têm notas registradas.
-- INNER JOIN : tudo que tem relação ele exibe, por exemplo se pedirmos para exibir as pessoas que fizeram compras em um banco de dados, ele exibirá apenas quem fez compras

select alunos.nome from alunos
inner join notas on alunos.aluno_id=notas.aluno_id
where notas.nota is null;

-- 7 - Quais disciplinas têm menos de 40 horas de carga horária ou mais de 100 horas de carga horária?
-- or (ou) 

select nome_disciplina from disciplinas 
where carga_horaria <40 or carga_horaria > 100;

-- 8 - Encontre o nome dos professores que não estão ministrando a disciplina "IA501".

select professores.nome from professores
inner join turmas on professores.professor_id=turmas.professor_id
inner join disciplinas on turmas.disciplina_id=disciplinas.disciplina_id
where not disciplinas.codigo_disciplina = "IA501";

-- 9 - Quais turmas não têm professores atribuídos?

select turmas.turma_id, professores.nome from turmas
left join professores on professores.nome= turmas.professor_id
where not professores.professor_id is null;


-- 10 - Liste as disciplinas e seus códigos onde pelo menos um aluno obteve uma nota menor que 60.

select disciplinas.nome_disciplina, disciplinas.codigo_disciplina from disciplinas
left join notas on disciplinas.disciplina_id=notas.disciplina_id
left join alunos on notas.aluno_id=alunos.aluno_id
where notas.nota < 60;

-- 11 - Qual é a média das notas dos alunos na disciplina com código "DW301" entre '2023-03-01' e '2023-03-31'
-- avg para retornar a média
-- between - entre, para retornar entre as datas '2023-03-01' e '2023-03-31'

select avg(notas.nota) from notas 
inner join disciplinas on notas.disciplina_id=disciplinas.disciplina_id
where disciplinas.codigo_disciplina="DW301" AND data_avaliacao between "2023-03-10" and '2023-03-31';

-- 12 -  Liste todos os alunos que estão matriculados em mais de uma disciplina.
-- count - ele conta o numero de itens dentro do filtro 
-- group by - identifica uma coluna selecionada a ser usada para agrupar os resultados. 
-- group by nesse caso é usado para a coluna de alunos que estao matriculados em mais de uma disciplina, having > maior que 1
-- having é como o where mais se aplica somente a grupos como um todo

select COUNT(alunos.aluno_id) as disciplinas, alunos.nome from alunos
inner join notas on alunos.aluno_id=notas.aluno_id
inner join disciplinas on notas.disciplina_id=disciplinas.disciplina_id
group by alunos.nome having disciplinas > 1;

-- 13 - Quais são os anos escolares distintos das turmas onde pelo menos um aluno faltou?

select ano_escolar from turmas
inner join presenca on turmas.turma_id=presenca.turma_id
where presenca.presenca = "ausente";

-- 14 - Mostre o nome dos professores que estão ministrando a disciplina "PC101" ou "BD201".
-- Selecionar o nome dos professores na tabela professores, conectar as tabelas turmas de disciplinas, com a condição do codigo

select professores.nome from professores
inner join turmas on professores.professor_id=turmas.professor_id
inner join disciplinas on turmas.disciplina_id=disciplinas.disciplina_id
where codigo_disciplina="PC101" or codigo_disciplina="BD201";

-- 15 - Qual é o nome do aluno que faltou em todas as aulas?

select alunos.nome from alunos
inner join presenca on alunos.aluno_id=presenca.aluno_id
where not presenca.presenca = "presente";

-- 16 - Liste as disciplinas e seus códigos onde todos os alunos obtiveram uma nota maior ou igual a 70.
-- min - essa função retorna o menor valor de um conjunto

select d.nome_disciplina, d.codigo_disciplina, min(nota) as min_nota from disciplinas as d
inner join notas as n on d.disciplina_id=n.disciplina_id
group by d.nome_disciplina, d.codigo_disciplina having min_nota >=70;

-- 17 - Quais alunos obtiveram notas entre 80 e 90 na disciplina "IA501" ou "DW301"?
-- between - usado quando se está “entre” duas coisas ou pessoas
-- or (ou)  and (e)

select alunos.nome from alunos
inner join notas on alunos.aluno_id=notas.aluno_id
inner join disciplinas on notas.disciplina_id=disciplinas.disciplina_id
where codigo_disciplina="IA501" and notas.nota between 80 and 90 or  codigo_disciplina="DW301" and notas.nota between 80 and 90;


-- 18 - Encontre o nome dos professores que não estão ministrando nenhuma disciplina com carga horária superior a 60 horas.

select professores.nome from professores 
inner join turmas on professores.professor_id=turmas.professor_id
inner join disciplinas on turmas.disciplina_id=disciplinas.disciplina_id
where disciplinas.carga_horaria>60;

-- 19 - Quais são as datas de aulas para a disciplina com código "AA401" entre '2023-04-01' e '2023-04-30' onde pelo menos um aluno faltou?

select presenca.data_aula from presenca 
inner join turmas on presenca.presenca_id=turmas.turma_id
inner join disciplinas on turmas.disciplina_id=disciplinas.disciplina_id
where disciplinas.codigo_disciplina="AA401" and data_aula between '2023-04-01' and '2023-04-30' and presenca.presenca = "ausente";


-- 20 - Liste os nomes dos alunos que não faltaram em nenhuma aula.

select alunos.nome from alunos
inner join presenca on alunos.aluno_id=presenca.aluno_id
where not presenca.presenca="ausente";

